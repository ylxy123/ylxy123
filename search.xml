<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ubuntu18-04虚拟机搭建HTCondor集群（四）运行测试程序</title>
      <link href="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F/"/>
      <url>/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于测试程序我暂时没有在网上找到一份能够完美运行的教程，遂记录一下我运行成功的案例。</p></blockquote><p>当我们搭建好一个htcondor的pool并且能够通过<code>condor_status</code>看 到节点资源的时候，我们可以通过如下来运行一些测试job：</p><h1 id="提交一个简单的condor任务"><a href="#提交一个简单的condor任务" class="headerlink" title="提交一个简单的condor任务"></a>提交一个简单的condor任务</h1><p>下面我们提交一个判断1~100素数的例子：</p><h2 id="按如下层级结构创建文件夹："><a href="#按如下层级结构创建文件夹：" class="headerlink" title="按如下层级结构创建文件夹："></a>按如下层级结构创建文件夹：</h2><blockquote><p>job/        # 任务主文件夹</p><p>job/error/        # 存放报错信息</p><p>job/input/        # 存放输入文件</p><p>job/log/          # 存放日志文件</p><p>job/output/    # 存放stdout文件</p></blockquote><h2 id="在job下新建一个可执行程序prime-sh"><a href="#在job下新建一个可执行程序prime-sh" class="headerlink" title="在job下新建一个可执行程序prime.sh"></a>在job下新建一个可执行程序<code>prime.sh</code></h2><blockquote><p>当我们使用<code>cat &gt; 文件名</code>编辑内容时建议从其他地方直接复制，编辑完毕后按<code>ctrl+D</code>退出。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@ylxy2:/home/ylxy2/job# cat &gt; prime.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Determine <span class="keyword">if</span> argument is a prime number.</span></span><br><span class="line">num=$1</span><br><span class="line">maxd=$((num/2))</span><br><span class="line">div=2</span><br><span class="line">if [[ $num -lt 2 ]];</span><br><span class="line">then</span><br><span class="line">    echo $num &quot;is not prime&quot;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line">while [[ $div -le $maxd ]]</span><br><span class="line">do </span><br><span class="line">    res=$(expr $num % $div)</span><br><span class="line">    if [[ $res -eq 0 ]]</span><br><span class="line">    then</span><br><span class="line">        echo $num &quot;is not prime,Divisor is &quot;$div</span><br><span class="line">        exit</span><br><span class="line">    fi</span><br><span class="line">    #i=$(($i+1))</span><br><span class="line">    div=$(expr $div + 1)</span><br><span class="line">done</span><br><span class="line">echo $num &quot;is prime&quot;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="同一文件夹下新建一个描述文件prime-sub"><a href="#同一文件夹下新建一个描述文件prime-sub" class="headerlink" title="同一文件夹下新建一个描述文件prime.sub"></a>同一文件夹下新建一个描述文件<code>prime.sub</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@ylxy2:/home/ylxy2/job# cat &gt; prime.sub</span><br><span class="line">universe = vanilla</span><br><span class="line">initialdir =/home/ylxy2/job</span><br><span class="line">arguments = input/prime$(Process).input</span><br><span class="line">error = error/prime$(Process).error</span><br><span class="line">log = log/prime$(Process).log</span><br><span class="line">output = output/prime$(Process).out</span><br><span class="line">executable = prime.sh</span><br><span class="line">+AccountingGroup = &quot;ylxy2&quot;</span><br><span class="line">Notification=never</span><br><span class="line">queue 100</span><br></pre></td></tr></table></figure><blockquote><p>描述说明：</p><p><code>universe</code>：参数表示HTCondor的运行环境，默认为vanilla。vanilla提供的功能会少一些，但是使用也会较为方便。<br><code>initialdir</code> ：代表执行开始的地方<br><code>error,log,output</code>：利用了“$(Process)”宏，来为每个任务根据进程号来将文件标号，划分开来.</p><p><code>executable</code>：可执行文件的名字<br><code>arguments</code> ：执行文件需要传递的参数，或者依赖的输入文件等<br><code>+AccountingGroup</code>：用你的用户名取代“condor”<br><code>Notification</code>：如果不包括此项，condor将会在完成每个任务后发送邮件提醒你。<br><code>queue</code>：代表执行多次任务。本示例中100说明：对于这个测试的执行次数。$(Process)将会设置为０～99．</p></blockquote><h2 id="准备输入文件"><a href="#准备输入文件" class="headerlink" title="准备输入文件"></a>准备输入文件</h2><p>通过python脚本创建输入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line"><span class="comment"># 注意提前创建input文件夹</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./input/prime&#123;&#125;.input&#x27;</span>.<span class="built_in">format</span>(i), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="为执行文件夹添加权限（重要！！！关乎到程序能否正确运行）"><a href="#为执行文件夹添加权限（重要！！！关乎到程序能否正确运行）" class="headerlink" title="为执行文件夹添加权限（重要！！！关乎到程序能否正确运行）"></a>为执行文件夹添加权限（重要！！！关乎到程序能否正确运行）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ylxy2:/home/ylxy2/job# chmod -R 777 /home/ylxy2/job</span><br><span class="line">root@ylxy2:/home/ylxy2/job#</span><br></pre></td></tr></table></figure><h2 id="使用condor-submit指令提交prime-sub"><a href="#使用condor-submit指令提交prime-sub" class="headerlink" title="使用condor_submit指令提交prime.sub"></a>使用<code>condor_submit</code>指令提交<code>prime.sub</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ylxy2:/home/ylxy2/job# condor_submit prime.sub</span><br><span class="line">Submitting job(s)....................................................................................................</span><br><span class="line">100 job(s) submitted to cluster 20.</span><br><span class="line">root@ylxy2:/home/ylxy2/job#</span><br></pre></td></tr></table></figure><h2 id="使用condor-q查看已提交任务的运行状态"><a href="#使用condor-q查看已提交任务的运行状态" class="headerlink" title="使用condor_q查看已提交任务的运行状态"></a>使用<code>condor_q</code>查看已提交任务的运行状态</h2><blockquote><p>注意：只有当节点拥有<code>SCHEDD</code>功能时才可使用<code>condor_q</code>指令。可以进<code>/etc/condor/condor_config</code>在<code>DAEMON_LIST</code>后面追加<code>SCHEDD</code>参数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@ylxy2:/home/ylxy2/job# condor_q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Schedd: ylxy2 : &lt;192.168.88.129:36703?... @ 05/03/21 00:29:33</span><br><span class="line">OWNER  BATCH_NAME    SUBMITTED   DONE   RUN    IDLE  TOTAL JOB_IDS</span><br><span class="line">condor ID: 20       5/3  00:29     35      3     62    100 20.29-99</span><br><span class="line"></span><br><span class="line">Total for query: 65 jobs; 0 completed, 0 removed, 62 idle, 3 running, 0 held, 0 suspended </span><br><span class="line">Total for all users: 65 jobs; 0 completed, 0 removed, 62 idle, 3 running, 0 held, 0 suspended</span><br><span class="line"></span><br><span class="line">root@ylxy2:/home/ylxy2/job# condor_q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Schedd: ylxy2 : &lt;192.168.88.129:36703?... @ 05/03/21 00:30:51</span><br><span class="line">OWNER BATCH_NAME      SUBMITTED   DONE   RUN    IDLE   HOLD  TOTAL JOB_IDS</span><br><span class="line"></span><br><span class="line">Total for query: 0 jobs; 0 completed, 0 removed, 0 idle, 0 running, 0 held, 0 suspended </span><br><span class="line">Total for all users: 0 jobs; 0 completed, 0 removed, 0 idle, 0 running, 0 held, 0 suspended</span><br></pre></td></tr></table></figure><blockquote><p>当<code>condor_q</code>查询返回的任务数变为0时表示任务执行完毕。</p></blockquote><h2 id="使用condor-history查看历史执行的任务"><a href="#使用condor-history查看历史执行的任务" class="headerlink" title="使用condor_history查看历史执行的任务"></a>使用<code>condor_history</code>查看历史执行的任务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@ylxy2:/home/ylxy2/job# condor_history</span><br><span class="line"> ID     OWNER          SUBMITTED   RUN_TIME     ST COMPLETED   CMD            </span><br><span class="line">  20.94  condor          5/3  00:29   0+00:00:02 C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.99  condor          5/3  00:29              C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.91  condor          5/3  00:29   0+00:00:01 C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.98  condor          5/3  00:29              C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.97  condor          5/3  00:29              C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.96  condor          5/3  00:29              C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.95  condor          5/3  00:29   0+00:00:01 C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.93  condor          5/3  00:29              C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.85  condor          5/3  00:29   0+00:00:01 C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br><span class="line">  20.92  condor          5/3  00:29              C   5/3  00:29 /home/ylxy2/job/prime.sh in</span><br></pre></td></tr></table></figure><blockquote><p>这里只截取了部分，<code>ST</code>列表示执行状态，为<code>C</code>表示已完成。</p></blockquote><h2 id="查看输出文件"><a href="#查看输出文件" class="headerlink" title="查看输出文件"></a>查看输出文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ylxy2:/home/ylxy2/job# cat input/prime96.input</span><br><span class="line">97</span><br><span class="line">root@ylxy2:/home/ylxy2/job# cat output/prime96.out</span><br><span class="line">input/prime96.input is prime</span><br><span class="line">root@ylxy2:/home/ylxy2/job#</span><br></pre></td></tr></table></figure><p>该输出表明97是素数，程序完美运行。Perfect！(*^▽^*)</p>]]></content>
      
      
      <categories>
          
          <category> HTCondor集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 集群 </tag>
            
            <tag> htcondor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18-04虚拟机搭建HTCondor集群（三）安装HTCondor</title>
      <link href="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%89%EF%BC%89%E5%AE%89%E8%A3%85HTCondor/"/>
      <url>/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%89%EF%BC%89%E5%AE%89%E8%A3%85HTCondor/</url>
      
        <content type="html"><![CDATA[<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><ul><li>有用于搭建的多个虚拟机，且相互之间能ping通</li><li>虚拟机均能访问互联网</li></ul><h1 id="安装curl"><a href="#安装curl" class="headerlink" title="安装curl"></a>安装<code>curl</code></h1><p><code>apt-get update &amp;&amp; apt-get install -y curl</code></p><h1 id="根据角色安装htcondor"><a href="#根据角色安装htcondor" class="headerlink" title="根据角色安装htcondor"></a>根据角色安装htcondor</h1><p>注意将命令中的<code>$htcondor_password</code>换成登录密码（三个都要一样），<code>$central_manager_name</code>换成将要设立中央节点的虚拟机ip</p><blockquote><p>配置静态ip就是为了这一步</p></blockquote><p><code>Central Manager</code>中心节点</p><p><code>sudo curl -fsSL https://get.htcondor.com | GET_HTCONDOR_PASSWORD=$htcondor_password /bin/bash -s -- --no-dry-run --central-manager $central_manager_name</code></p><p><code>Submit</code>提交节点</p><p><code>sudo curl -fsSL https://get.htcondor.com | GET_HTCONDOR_PASSWORD=$htcondor_password /bin/bash -s -- --no-dry-run --submit $central_manager_name</code></p><p><code>Execute</code>执行节点</p><p><code>sudo curl -fsSL https://get.htcondor.com | GET_HTCONDOR_PASSWORD=$htcondor_password /bin/bash -s -- --no-dry-run --execute $central_manager_name</code></p><h1 id="安装成功之后开启服务"><a href="#安装成功之后开启服务" class="headerlink" title="安装成功之后开启服务"></a>安装成功之后开启服务</h1><p><code>sh -c &#39;systemctl enable condor&#39;</code></p><p><code>sh -c &#39;systemctl start condor&#39;</code></p><p>关闭服务</p><p><code>sh -c &#39;systemctl stop condor&#39;</code></p><blockquote><p>可以用<code>pstree | grep condor</code>命令查看condor服务是否启动</p></blockquote><h1 id="查看是否安装成功和节点通信是否正常"><a href="#查看是否安装成功和节点通信是否正常" class="headerlink" title="查看是否安装成功和节点通信是否正常"></a>查看是否安装成功和节点通信是否正常</h1><p>安装完毕并且正常开启服务之后，提交机器上登录的用户应该能够通过<code>condor_status</code>指令看到池中的执行机器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ylxy2:/home/ylxy2$ condor_status</span><br><span class="line">Name               OpSys      Arch   State     Activity LoadAv Mem   Actvt</span><br><span class="line"></span><br><span class="line">ylxy3              LINUX      X86_64 Claimed   Busy      0.000 1970  0+00:</span><br><span class="line"></span><br><span class="line">               Total Owner Claimed Unclaimed Matched Preempting Backfill  Drain</span><br><span class="line"></span><br><span class="line">  X86_64/LINUX     1     0       1         0       0          0        0      0</span><br><span class="line"></span><br><span class="line">         Total     1     0       1         0       0          0        0      0</span><br></pre></td></tr></table></figure><h1 id="自定义角色功能"><a href="#自定义角色功能" class="headerlink" title="自定义角色功能"></a>自定义角色功能</h1><p>我们可以通过如下配置<code>condor_config</code>来自定义各个节点的功能：</p><p><code>sudo vi /etc/condor/condor_config</code></p><p>根据不同的角色，请分别在主节点和从属节点上向<code>condor_config</code>里面添加如下信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DAEMON_LIST = COLLECTOR MASTER NEGOTIATOR SCHEDD STARTD # 中央节点</span><br><span class="line">DAEMON_LIST = MASTER SCHEDD # 提交节点</span><br><span class="line">DAEMON_LIST = MASTER STARTD # 执行节点</span><br></pre></td></tr></table></figure><blockquote><p><code>DAEMON_LIST</code>是分配具体功能的，推荐如下分配：</p><p>中央管理节点（可提交可执行，一个pool中最多存在一个中央管理节点）<br>DAEMON_LIST = COLLECTOR, MASTER, NEGOTIATOR, SCHEDD, STARTD</p><p>中央管理节点（只提交不执行）<br>DAEMON_LIST = COLLECTOR, MASTER, NEGOTIATOR, SCHEDD</p><p>提交与执行节点<br>DAEMON_LIST = MASTER, SCHEDD, STARTD</p><p>提交节点<br>DAEMON_LIST = MASTER, SCHEDD</p><p>执行节点<br>DAEMON_LIST = MASTER, STARTD</p></blockquote><p>编辑完成后输入<code>:wq</code>保存退出，然后通过<code>condor_reconfig</code>更新配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ylxy2@ylxy2:~$ condor_reconfig</span><br><span class="line">Sent &quot;Reconfig&quot; command to local master</span><br><span class="line">ylxy2@ylxy2:~$</span><br></pre></td></tr></table></figure><p>更新之后，我们通过<code>condor_status</code>命令可以看到我们的pool中多了新的执行节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ylxy2@ylxy2:~$ condor_status</span><br><span class="line">Name         OpSys      Arch   State     Activity LoadAv Mem   ActvtyTime</span><br><span class="line"></span><br><span class="line">ylxy1        LINUX      X86_64 Claimed   Busy      0.000 1970  0+00:25:01</span><br><span class="line">ylxy2        LINUX      X86_64 Claimed   Busy      0.000 1970  0+00:25:45</span><br><span class="line">ylxy3        LINUX      X86_64 Claimed   Busy      0.000 1970  0+00:24:48</span><br><span class="line"></span><br><span class="line">               Total Owner Claimed Unclaimed Matched Preempting Backfill  Drain</span><br><span class="line"></span><br><span class="line">  X86_64/LINUX     3     0       3         0       0          0        0      0</span><br><span class="line"></span><br><span class="line">         Total     3     0       3         0       0          0        0      0</span><br><span class="line">ylxy2@ylxy2:~$</span><br></pre></td></tr></table></figure><p>至此一个集群就搭建完啦，接下来我们就可以跑跑测试代码了。</p>]]></content>
      
      
      <categories>
          
          <category> HTCondor集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ssh </tag>
            
            <tag> 免密登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18-04虚拟机搭建HTCondor集群（二）设置静态ip</title>
      <link href="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
      <url>/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</url>
      
        <content type="html"><![CDATA[<p>为了方便我们使用，为虚拟机手动划分固定ip是很有必要的。整个过程分为以下两步：</p><h1 id="在VMware上配置虚拟网络"><a href="#在VMware上配置虚拟网络" class="headerlink" title="在VMware上配置虚拟网络"></a><code>在VMware上配置虚拟网络</code></h1><p>打开VMware，打开<code>编辑-&gt;虚拟网络编辑器</code>，选中<code>VMnet8</code>，</p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/image-20210502021432704.png" alt="编辑VMnet8"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/image-20210502023137564.png" alt="记录下网关"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/image-20210502021601138.png" alt="点击确定保存设置"></p><h1 id="修改虚拟机的网络配置"><a href="#修改虚拟机的网络配置" class="headerlink" title="修改虚拟机的网络配置"></a>修改虚拟机的网络配置</h1><p>然后在VMware中，打开虚拟机设置（右键虚拟机，点击<code>设置</code>），将<code>网络适配器</code>更改为自定义的<code>VMnet8(NAT模式)</code></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/image-20210502022121053.png" alt="虚拟机设置"></p><h1 id="在修改本地VMnet8网络"><a href="#在修改本地VMnet8网络" class="headerlink" title="在修改本地VMnet8网络"></a>在修改本地<code>VMnet8</code>网络</h1><p>设置完毕后，打开系统<code>控制面板-&gt;网络和共享中心-&gt;更改适配器设置</code>，右键<code>VMnet8</code>，点击<code>属性</code></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/image-20210502023712206.png" alt="打开本地网络配置"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/image-20210502023753341.png" alt="打开ipv4的属性"></p><p>将ip、网关设置为之前记录的，掩码一般默认<code>225.225.225.0</code>，DNS可以按照我的来设置</p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/image-20210502023826851.png" alt="将ip和dns设置为手动"></p><h1 id="开启虚拟机，手动分配网络"><a href="#开启虚拟机，手动分配网络" class="headerlink" title="开启虚拟机，手动分配网络"></a>开启虚拟机，手动分配网络</h1><p>以上设置完毕之后，开启虚拟机，编辑<code>netplan</code>下的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ylxy1@ylxy1:~$ ls &#x2F;etc&#x2F;netplan</span><br><span class="line">00-installer-config.yaml</span><br><span class="line"></span><br><span class="line">ylxy1@ylxy1:~$ sudo vi &#x2F;etc&#x2F;netplan&#x2F;00-installer-config.yaml </span><br></pre></td></tr></table></figure><p>按<code>i</code>进入编辑模式，将里面的内容替换为：（注意：多个虚拟机不能用同一ip，会有冲突）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: no    # 关闭ipv4的dhcp</span><br><span class="line">      dhcp6: no    # 关闭ipv6的dhcp</span><br><span class="line">      addresses:</span><br><span class="line">        - 子网ip&#x2F;掩码     # 根据自己的设置更换</span><br><span class="line">      gateway4: 网关      # 根据自己的设置更换</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [223.5.5.5, 8.8.8.8， 1.1.1.1]</span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure><p>编辑完毕按<code>esc</code>退出编辑模式，输入<code>:wq</code>保存并退出，通过<code>netplan apply</code>命令更新配置文件。若没任何反应，说明配置成功更新。通过<code>ipconfig</code>也可查看设置的ip。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ylxy1@ylxy1:~$ sudo netplan apply</span><br><span class="line">ylxy1@ylxy1:~$ </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ylxy1@ylxy1:~$ ifconfig</span><br><span class="line">ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.88.128  netmask 255.255.255.0  broadcast 192.168.88.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe26:e7b0  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:26:e7:b0  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 32374  bytes 37257047 (37.2 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 11969  bytes 1234565 (1.2 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 3422  bytes 1698371 (1.6 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3422  bytes 1698371 (1.6 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ylxy1@ylxy1:~$ </span><br></pre></td></tr></table></figure><p>成功啦！</p>]]></content>
      
      
      <categories>
          
          <category> HTCondor集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> ubuntu </tag>
            
            <tag> nat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04虚拟机搭建HTCondor集群（一）安装server</title>
      <link href="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/"/>
      <url>/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/</url>
      
        <content type="html"><![CDATA[<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><ul><li><p>Vmware Workstation</p></li><li><p>ubuntu18.04 Server版</p><p><a href="http://releases.ubuntu.com/18.04/ubuntu-18.04.5-live-server-amd64.iso">点击链接下载x64</a></p></li></ul><h1 id="打开VMware，创建虚拟机"><a href="#打开VMware，创建虚拟机" class="headerlink" title="打开VMware，创建虚拟机"></a>打开VMware，创建虚拟机</h1><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502004329752.png" alt="点击新建虚拟机"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502004349906.png" alt="默认，下一步"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502004430129.png" alt="选择已经下好的镜像文件"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502004602644.png" alt="设置用户名和密码"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502004715293.png" alt="设置虚拟机名称和位置"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502004804431.png" alt="设置虚拟机处理器"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502004908570.png" alt="设置虚拟机内存"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005017882.png" alt="暂不配置网络，下一步"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005036927.png" alt="默认，下一步"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005056691.png" alt="默认，下一步"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005152449.png" alt="创建虚拟磁盘"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005320430.png" alt="设置磁盘容量"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005331445.png" alt="默认，下一步"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005419631.png" alt="点击完成开始创建"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005434149.png" alt="正在创建磁盘"></p><p>开启创建好的虚拟机之后，进入简易安装界面：</p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005737733.png" alt="选择语言，按回车继续"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005832215.png" alt="设置键盘布局，然后回车"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005924763.png" alt="直接下一步，后面再配置静态网络"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502005954792.png" alt="设置代理，回车"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502010027458.png" alt="建议将源切换至国内"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502010105189.png" alt="默认，直接下一步"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502010121160.png" alt="默认，下一步"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502010137020.png" alt="选择Continue"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502010217931.png" alt="配置用户账户及密码"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502010244097.png" alt="按空格安装OpenSsh，下一步"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502010326282.png" alt="开始安装"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502010411056.png" alt="安装完毕，回车重启"></p><p><img src="/ylxy123/2021/05/02/ubuntu18-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHTCondor%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85server/image-20210502011231264.png" alt="重启完成后输入之前设置的用户名和密码即可登录"></p>]]></content>
      
      
      <categories>
          
          <category> HTCondor集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> VMware </tag>
            
            <tag> ubuntu </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用UltraISO制作Ubuntu启动盘</title>
      <link href="/ylxy123/2021/05/01/%E7%94%A8UltraISO%E5%88%B6%E4%BD%9CUbuntu%E5%90%AF%E5%8A%A8%E7%9B%98/"/>
      <url>/ylxy123/2021/05/01/%E7%94%A8UltraISO%E5%88%B6%E4%BD%9CUbuntu%E5%90%AF%E5%8A%A8%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a><code>准备阶段</code></h1><ul><li>安装UltralISO（软碟通）：<a href="https://cn.ultraiso.net/uiso9_cn.exe">点击此处下载</a></li><li>ubuntu镜像文件：<a href="http://cn.ubuntu.com/">点击此处前往官网</a></li><li>U盘或其他移动存储介质</li></ul><h1 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a><code>开始制作</code></h1><p>1、插上U盘进行格式化</p><p><img src="/ylxy123/2021/05/01/%E7%94%A8UltraISO%E5%88%B6%E4%BD%9CUbuntu%E5%90%AF%E5%8A%A8%E7%9B%98/image-20210501132916591.png" alt="image-20210501132916591"></p><p><img src="/ylxy123/2021/05/01/%E7%94%A8UltraISO%E5%88%B6%E4%BD%9CUbuntu%E5%90%AF%E5%8A%A8%E7%9B%98/image-20210501133023630.png" alt="image-20210501133023630"></p><p>2、打开UltralISO，在<code>文件-&gt;打开</code>打开下载好的<code>ubuntu.iso</code>文件</p><p><img src="/ylxy123/2021/05/01/%E7%94%A8UltraISO%E5%88%B6%E4%BD%9CUbuntu%E5%90%AF%E5%8A%A8%E7%9B%98/image-20210501133318733.png" alt="image-20210501133318733"></p><p><img src="/ylxy123/2021/05/01/%E7%94%A8UltraISO%E5%88%B6%E4%BD%9CUbuntu%E5%90%AF%E5%8A%A8%E7%9B%98/image-20210501133354749.png" alt="image-20210501133354749"></p><p>3、找到<code>启动-&gt;写入硬盘映像</code>，将<code>便捷启动</code>改为<code>写入新的驱动引导扇区-&gt;Syslinux</code>，然后点击<code>写入</code></p><p><img src="/ylxy123/2021/05/01/%E7%94%A8UltraISO%E5%88%B6%E4%BD%9CUbuntu%E5%90%AF%E5%8A%A8%E7%9B%98/image-20210501133606733.png" alt="image-20210501133606733"></p><p>4、写入成功！</p><p><img src="/ylxy123/2021/05/01/%E7%94%A8UltraISO%E5%88%B6%E4%BD%9CUbuntu%E5%90%AF%E5%8A%A8%E7%9B%98/image-20210501140308866.png" alt="image-20210501140308866"></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu18.04 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> UltralISO </tag>
            
            <tag> 软碟通 </tag>
            
            <tag> 启动盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校验码之海明码</title>
      <link href="/ylxy123/2021/03/29/%E6%A0%A1%E9%AA%8C%E7%A0%81%E4%B9%8B%E6%B5%B7%E6%98%8E%E7%A0%81/"/>
      <url>/ylxy123/2021/03/29/%E6%A0%A1%E9%AA%8C%E7%A0%81%E4%B9%8B%E6%B5%B7%E6%98%8E%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>为减少或避免数据在计算机系统内形成、存取或传输过程中产生的错误，除了提升相关硬件的可靠性之外，还可以在数据编码上采取检错，纠错的机制。因此，具有检错或纠错能力的数据校验码应运而生。</p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a><code>实现原理</code></h1><p>　　数据校验码的实现原理，即在正常编码中加入一些冗余位，使得正常编码组中包含一些非法编码。当合法数据编码出现某些错误时，就变成了非法编码。因此，我们可以通过检查编码的合法性来达到错误检测，定位乃至改正的目的。</p><h1 id="编码距离"><a href="#编码距离" class="headerlink" title="编码距离"></a><code>编码距离</code></h1><p>　　我们通常将一组编码中任意两个编码之间代码不同的位数称为这两个编码的距离，也称<code>海明距离</code>。如$0011$与$0001$的海明距离为$1$。</p><blockquote><p>  判断一组编码有无查错、纠错能力只需判断其码距是否大于$1$。</p></blockquote><h2 id="码距与检错能力和纠错能力的关系"><a href="#码距与检错能力和纠错能力的关系" class="headerlink" title="码距与检错能力和纠错能力的关系"></a><code>码距与检错能力和纠错能力的关系</code></h2><table><thead><tr><th>码距</th><th>校验码的检错能力/纠错能力</th></tr></thead><tbody><tr><td>$d\ge e+1$</td><td>可检$e$个错</td></tr><tr><td>$d\ge2t+1$</td><td>可纠$t$个错</td></tr><tr><td>$d\ge e+t+1$且$e&gt;t$</td><td>可检$e$个错且可纠$t$个错</td></tr></tbody></table><h1 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a><code>奇偶校验码</code></h1><p>　　奇偶校验又称垂直冗余校验。若采用奇校验，发送端发送一个字符编码（$8$位编码含校验位），其中“$1$”的个数一定为奇数个。接收端即对编码中“$1$”的个数进行统计。若非奇数则说明发生了差错。偶校验反之亦然。</p><blockquote><p>  奇偶校验码的缺点在于其仅能发现奇数个错误，且无法纠错。</p></blockquote><h1 id="海明校验码"><a href="#海明校验码" class="headerlink" title="海明校验码"></a><code>海明校验码</code></h1><p>　　海明校验码是以奇偶校验码为基础，通过增加码距构成多组奇偶校验来达到差错检测及自动纠正的功能。</p><h2 id="校验位数"><a href="#校验位数" class="headerlink" title="校验位数"></a><code>校验位数</code></h2><p>　　设有效信息位数为$n$，校验位数为$k$，则能够检测$1$位错误并纠正$1$位错误的海明码应满足表达式：$2^k\ge n+k+1$。如数据位为$8$位，则由公式$2^k\ge 8+k+1=k+9$可知利用海明码编码时校验位应为$4$位。</p><p>　　由以上公式可计算得到数据位$n$与校验位$k$的对应关系：</p><table><thead><tr><th>数据位$n$</th><th>最小$k$值</th></tr></thead><tbody><tr><td>$1$</td><td>$2$</td></tr><tr><td>$2\text{～}4$</td><td>$3$</td></tr><tr><td>$5\text{～}11$</td><td>$4$</td></tr><tr><td>$12\text{～}26$</td><td>$5$</td></tr><tr><td>$27\text{～}57$</td><td>$6$</td></tr><tr><td>$58\text{～}120$</td><td>$7$</td></tr></tbody></table><h2 id="编码方法"><a href="#编码方法" class="headerlink" title="编码方法"></a><code>编码方法</code></h2><p>　　将校验码下标从左至右按$1$到$n+k$排列，则校验位下标分别为$2^i(i=0,\cdots,k)$。</p><table><thead><tr><th>$\text{H}_1$</th><th>$\text{H}_2$</th><th>$\text{H}_3$</th><th>$\text{H}_4$</th><th>$\text{H}_5$</th><th>$\text{H}_6$</th><th>$\text{H}_7$</th><th>$\text{H}_8$</th><th>$\text{H}_9$</th><th>$\text{H}_{10}$</th><th>$\text{H}_{11}$</th><th>$\text{H}_{12}$</th><th>$\cdots$</th></tr></thead><tbody><tr><td>$\text{P}_1$</td><td>$\text{P}_2$</td><td>$\text{D}_1$</td><td>$\text{P}_4$</td><td>$\text{D}_2$</td><td>$\text{D}_3$</td><td>$\text{D}_4$</td><td>$\text{P}_8$</td><td>$\text{D}_5$</td><td>$\text{D}_6$</td><td>$\text{D}_7$</td><td>$\text{D}_8$</td><td>$\cdots$</td></tr></tbody></table><p>$k$个校验位构成$k$组奇偶校验。</p><h2 id="校验分组"><a href="#校验分组" class="headerlink" title="校验分组"></a><code>校验分组</code></h2><p>　　对于下标为$2^i(i=0,\cdots,k)$的校验位，其对应的分组方法为==先取$2^i$开头的连续$2^i$位，然后连续去掉$2^i$位，再取$2^i$位，以此类推==：</p><p><img src="/ylxy123/2021/03/29/%E6%A0%A1%E9%AA%8C%E7%A0%81%E4%B9%8B%E6%B5%B7%E6%98%8E%E7%A0%81/aa64034f78f0f736eb20d6650e55b319eac413f3.jpg" alt="来源：百度百科"></p><p>　　由于奇偶校验同一原理，则以偶校验为例，每一行都是从对应的校验位开始校验。设有数据$01101001$，则其对应的校验位数为$4$。根据上表，有</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校验码 </tag>
            
            <tag> 海明码 </tag>
            
            <tag> HammingCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop开发环境搭建（一）配置CentOS7虚拟机</title>
      <link href="/ylxy123/2021/03/25/Hadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AECentOS7%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/ylxy123/2021/03/25/Hadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AECentOS7%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装VMware15-Pro"><a href="#一、安装VMware15-Pro" class="headerlink" title="一、安装VMware15 Pro"></a>一、安装VMware15 Pro</h1><h3 id="1-下载VMware15-Pro（非破解版）"><a href="#1-下载VMware15-Pro（非破解版）" class="headerlink" title="1.下载VMware15 Pro（非破解版）"></a>1.下载VMware15 Pro（非破解版）</h3><p><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.1.0-13591040.exe">点击此处下载VMware15 Pro</a>  </p><h3 id="2-安装下载好的VMware（安装过程简单。。。一路next就行）"><a href="#2-安装下载好的VMware（安装过程简单。。。一路next就行）" class="headerlink" title="2.安装下载好的VMware（安装过程简单。。。一路next就行）"></a>2.安装下载好的VMware（安装过程简单。。。一路next就行）</h3><h3 id="3-安装完成后运行（如图所示）"><a href="#3-安装完成后运行（如图所示）" class="headerlink" title="3.安装完成后运行（如图所示）"></a>3.安装完成后运行（如图所示）</h3><p><img src="https://img-blog.csdnimg.cn/20200817211355597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="4-下载CentOS7镜像文件"><a href="#4-下载CentOS7镜像文件" class="headerlink" title="4.下载CentOS7镜像文件"></a>4.下载CentOS7镜像文件</h3><p>阿里云站点：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso">http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso</a></p><h3 id="5-创建CentOS7虚拟机"><a href="#5-创建CentOS7虚拟机" class="headerlink" title="5.创建CentOS7虚拟机"></a>5.创建CentOS7虚拟机</h3><p>在VMware主页点击“创建新的虚拟机”，会弹出一个新建虚拟机向导<br><img src="https://img-blog.csdnimg.cn/20200817212201380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>导入刚刚下好的镜像文件，点击下一步<br><img src="https://img-blog.csdnimg.cn/20200817212402157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置系统账户名与密码，设置完之后点击下一步</p><p><img src="https://img-blog.csdnimg.cn/20200817213139102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置虚拟机名称与存放位置之后，点击下一步<br><img src="https://img-blog.csdnimg.cn/20200817213330616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置虚拟机的硬盘大小，建议30G以上，设置完点击下一步<br><img src="https://img-blog.csdnimg.cn/20200817213509409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击“自定义硬件”，设置内存大小（建议2G），设置完点击关闭<br><img src="https://img-blog.csdnimg.cn/20200817213912869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>确认后点击完成<br><img src="https://img-blog.csdnimg.cn/20200817213958561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>等待安装。。。<br>这里可以创建账户，也可以不创（未创建可用root登录）<br><img src="https://img-blog.csdnimg.cn/20200817214257832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装完成后，启动系统<br><img src="https://img-blog.csdnimg.cn/20200817220615393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击，在弹出的页面勾选“我接受”<br><img src="https://img-blog.csdnimg.cn/20200817220726642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200817221336467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200817221506956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200817221655444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置系统语言<br><img src="https://img-blog.csdnimg.cn/20200817221741751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>之后一路next，就可以愉快地玩耍啦(〃’▽’〃)~~<br><img src="https://img-blog.csdnimg.cn/20200817222343322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg5OTEzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> hadoop </tag>
            
            <tag> centOS </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记（二）模型评估与选择</title>
      <link href="/ylxy123/2021/03/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
      <url>/ylxy123/2021/03/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="经验误差与过拟合"><a href="#经验误差与过拟合" class="headerlink" title="经验误差与过拟合"></a><code>经验误差与过拟合</code></h1><p>​        分类错误的样本数占样本总数的比例称之为<code>错误率(error rate)</code>。若在$m$个样本中有$a$个被错误分类的样本，则其错误率为$E=\frac{a}{m}$。相对的，$1-E$则称为<code>精度(accuracy)</code>。同时，我们用<code>误差(error)</code>这一概念来度量学习器的预测输出与样本真实输出之间的差异。在训练集上的误差被称为<code>训练误差</code>或<code>经验误差(empirical error)</code>；在新样本上的误差称为<code>泛化误差</code>。由于新样本的未知性，我们所应努力的方向为使学习器的经验误差达到最小。然而实际上在训练集上取得误差最小的学习器往往并不能成为我们最想要的那个。即使其分类精度达到100%，也不能表示能很好地适应新样本。</p><p>​        为了能让学习器在新样本上取得良好表现，我们应该从训练样本中尽可能地学习到适用于所有潜在样本的“普遍规律”，这样才能在遇到新样本时尽可能地做出正确选择。但这会出现以下两种状况：</p><ol><li> 学习器将训练集自身的一些特点当成所有样本都可能具有的一般性质来进行学习。这样会使得模型的泛化能力下降，从而引入<code>过拟合(overfitting)</code>的问题；</li><li> 与过拟合相对的则是<code>欠拟合(underfitting)</code>，意思是模型并未能良好地学习到样本的一般性质。</li></ol><blockquote><p>  过拟合是无法完全避免的，是机器学习的一道障碍。我们能做的只是减少其带来的风险。</p></blockquote><h1 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a><code>评估方法</code></h1><p>​        我们可以通过实验来对学习器的泛化误差进行评估。通常我们先用一个测试集来测试学习器对新样本的分类能力，然后用测试集上的<code>测试误差</code>来近似泛化误差。前提是测试集是通过对真实样本独立同分布采样而获得的，且其样本未在训练集中出现过。这样的训练集跟测试集可通过如下方法产生：</p><ul><li><p><code>留出法(hold-out)</code></p><p>  这种方法可以直接将数据集$D$划分为两个互斥的集合，其中一个作为训练集$S$，另一个作为测试集$T$。但我们需要注意，训练集跟测试集的划分应使得二者具有相同/相近的分布，从而避免因数据划分而引入额外的偏差。以二分类为例，若我们通过采样来划分数据，则通常使用<code>分层采样(stratified sampling)</code>这一方式。例如通过分层采样将$D$划分为含$70%$样本的训练集和含$30%$样本的测试集。若$D$有$500$个正例，$500$个负例。则训练集跟测试集中正，负例比例也应为$1:1$。</p><p>  而另一个需要注意的问题就是，划分的方式并不唯一。即使给定比例，训练集与测试集的划分结果也不唯一。这将导致训练出来的模型的评估结果存在相应的差别。因此仅单次使用留出法所得到的模型评估结果往往不具有可靠性。使用留出法时，一般采用多次随机划分，重复实验评估后取平均值作为留出法的评估结果。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记（一）基础知识</title>
      <link href="/ylxy123/2021/03/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/ylxy123/2021/03/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是机器学习？"><a href="#什么是机器学习？" class="headerlink" title="什么是机器学习？"></a><code>什么是机器学习？</code></h1><ul><li>  机器学习致力于研究如何通过计算的手段，利用经验来改善系统自身的性能。</li><li>  在计算机系统中，“经验”通常以数据的形式存在。因此机器学习研究的主要内容是关于在计算机上从数据中产生“模型”的算法，即<code>学习算法(learning algorithm)</code>。有了学习算法，我们将经验数据提供给它，它就能基于这些数据产生“模型”。模型能给我们提供相应的判断。</li><li>  可以说机器学习是研究关于“学习算法”的学问。</li></ul><blockquote><p>  Mitchell给出了一个更加形式化的定义：假设用$P$来评估计算机程序在某任务类$T$上的性能。若一个程序通过利用经验$E$在$T$中任务上获得了<code>性能改善</code>，则我们说关于$T$和$P$，该程序对$E$进行了学习。</p></blockquote><h1 id="模型and模式？"><a href="#模型and模式？" class="headerlink" title="模型and模式？"></a><code>模型and模式？</code></h1><ul><li>  “模型”泛指从数据中学得的结果。有文献用“模型”指全局性结果（例如一棵决策树），而用“模式”指局部结果（如一条规则）。</li></ul><h1 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a><code>基本术语</code></h1><ul><li><p><code>数据集(data set)</code></p><p>  一组关于对象的记录的集合称为一个<code>数据集</code>，其中记录表示一个事件或一个对象的描述，称为<code>示例(instance)</code>或<code>样本(sample)</code>。反映事件或对象在某方面的表现或性质的事项称为<code>特征(feature)</code>或<code>属性(attribute)</code>，其中的取值称为<code>属性值(attribute value)</code>。属性扩张成的空间称为<code>样本空间</code>或<code>输入空间</code>。若以特征为坐标轴，则$n$个特征即张成一个$n$维空间，其中每个样本均可在其中找到一个坐标与之对应，此时一个样本也可称为一个<code>特征向量(feature vector)</code>。</p><blockquote><p>  有时一个样本可代表整个数据集。因为它可看作是对样本空间做的一个采样。</p></blockquote></li><li><p><code>学习过程</code></p><p>  从数据集中学到模型的过程称为<code>学习</code>或<code>训练过程</code>。这一过程所用到的数据集称为<code>训练集</code>，其中的样本称为<code>训练样本</code>。学习得到的模型对应于数据中存在的某种潜在规律。这种潜在规律称为<code>真相(ground-truth)</code>。学习的过程就是为了找出或无限逼近真相。所以模型有时被称为<code>学习器</code>。可以看作学习算法在给定数据和参数空间上的实例。</p><blockquote><p>  学习算法通常有参数设置，不同的参数设置和不同的训练集将产生不同的结果。</p></blockquote></li><li><p><code>标记(label)</code></p><p>  为了建立关于<code>预测(prediction)</code>的模型，除了示例数据，我们还需获取样本的结果信息。这样的结果信息称为<code>标记(label)</code>；而拥有标记的示例，称为<code>样例(example)</code>。我们可以用$(\pmb{x}_i,y_i)$来表示第$i$个样例。其中$\pmb{x}_i$表示示例，$y_i$表示其对应的标记。所有标记$y_i$构成的集合称<code>标记空间(label space)</code>或<code>输出空间</code>。</p></li><li><p><code>分类（classification）</code>or<code>回归(regression)</code></p><p>  若我们将要预测的值是离散的，则称此类学习任务为<code>分类</code>；若预测的值连续，则称<code>回归</code>。而根据类别个数，分类任务又分为<code>二分类(binary classification)</code>和<code>多分类(multi-class classification)</code>。在二分类任务中，通常一个称为<code>正类(positive class)</code>，一个称为<code>负类(negative class)</code>。通常预测任务的主要内容是通过对训练集的学习来建立一个从输入空间$\mathcal{X}$到输出空间$\mathcal{Y}$的映射。对二分类任务，通常令$\mathcal{Y}={-1,+1}$或${0,1}$；对多分类任务，$|\mathcal{Y}|&gt;2$；对回归任务，$\mathcal{Y}=\mathbb{R}$。</p></li><li><p><code>测试(testing)</code></p><p>  在学到模型之后，还应对其进行性能评估。这一过程称为<code>测试</code>。待预测的样本称为<code>测试样本(testing sample)</code>。</p></li><li><p><code>聚类(clustering)</code></p><p>  将训练集中的样本划分为若干组，每一组称为一个<code>簇(cluster)</code>。这些自动形成的簇可能对应一些潜在的概念划分。应用此学习过程可以帮助我们挖掘一些数据内在的规律。而这种学习过程不要求训练集拥有标记信息，否则标记信息可能会直接影响簇划分的结果。</p></li><li><p><code>监督学习(supervised learning)</code>和<code>无监督学习(unsupervised learning)</code></p><p>  根据训练集是否拥有标记信息，我们可将学习任务划分为两大类：<code>监督学习</code>和<code>无监督学习</code>。上文提及的分类和回归是前者的代表，而聚类则是后者的代表。</p></li><li><p><code>泛化(generalization)</code></p><p>  我们应该明白这一点，机器学习的目标应该是使模型能更好地适用于新样本而非训练数据。因此我们应该加强学得模型的适应能力，即<code>泛化</code>能力。</p><blockquote><p>  我们通常假设样本服从一个未知分布且相互独立，即<code>独立同分布(i.i.d.)</code>。一般而言，训练样本越多，样本空间越大，则我们能得到的信息越多，越有可能通过学习得到泛化能力强的模型。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/ylxy123/2021/03/20/hello-world/"/>
      <url>/ylxy123/2021/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>很高兴在2021年3月20日这一天搭建起我的个人博客！！！<br>本人将在其中更新我的学习经验帖。</p><p>俗话说好的开头就是成功的一半，希望自己能在接下来的一年半中完成自己的学习目标，考上理想的学校！</p>]]></content>
      
      
      <categories>
          
          <category> 个人简介 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
